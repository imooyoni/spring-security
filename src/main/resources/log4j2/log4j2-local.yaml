Configutation:
  # 구성 이름
  name: authorization

  # [Properties] 설정에 사용되는 속성들을 정의
  Properties:
    Property:
      - name: "log-path"
        value: "./logs"
      - name: "charset-UTF-8"
        value: "UTF-8"
      - name: "layout-pattern"
#        value: "%style{%d}{black} %highlight{%-5level} [%style{%t}{bright,blue}] %style{%C}{bright,yellow}: %msg%n%throwable"
        value: "%highlight{[%-5level]}{FATAL=bg_red, ERROR=red, INFO=green, DEBUG=blue} %X{uniqueId} %style{%d{yyyy/MM/dd HH:mm:ss,SSS}}{cyan} [%C] %style{[%t]}{yellow}- %m%n"
      - name: "info-log"
        value: ${log-path}/tugboatApi/api-info.log
      - name: "error-log"
        value: ${log-path}/tugboatApi/api-error.log
      - name: "auth-log"
        value: ${log-path}/tugboatApi/api-auth.log
      - name: "json-log"
        value: ${log-path}/tugboatApi/api-json-info.log

  # [Appenders] 로그 기록방식 정의
  Appenders:
    # [Appenders - Console] 콘솔에 로그를 출력하는 방식 정의
    Console:
      name: console-appender
      target: SYSTEM_OUT
      PatternLayout:
        charset: ${charset-UTF-8}
        pattern: ${layout-pattern}
        withAnsi: true  # ANSI 색상 코드 활성화
        disableAnsi: false

    # [Appenders - RollingFile] 로그를 파일들을 압축파일로 출력하는 방식 정의
    RollingFile:
      name: rolling-file-appender
      fileName: ${log-path}/rolling-file-log.log
      filePattern: "${log-path}/archive/rollingFile.log.%d{yyyy-MM-dd-hh-mm}_%i.gz"
      PatternLayout:
        charset: ${charset-UTF-8}
        pattern: ${layout-pattern}
      Policies:
        SizeBasedTriggeringPolicy:
          size: "200KB"
        TimeBasedTriggeringPolicy:
          interval: "1"
      DefaultRollOverStrategy:
        max: "30"
        fileIndex: "max"

    # [Appenders - File] 로그를 파일로 기록하는 방식 정의
    File:
      - name: file-info-appender
        fileName: ${info-log}
        PatternLayout:
          pattern: "%d %p %C{1.} [%t] %m%n"
      - name: file-error-appender
        fileName: ${error-log}
        PatternLayout:
          pattern: "%d %p %C{1.} [%t] %m%n"
      - name: file-auth-appender
        fileName: ${auth-log}
        PatternLayout:
          pattern: "%d %p %C{1.} [%t] %m%n"
      - name: file-json-info-appender
        fileName: ${json-log}
        PatternLayout:
          pattern: "%d %p %C{1.} [%t] %m%n"

  # [Loggers] 로그 출력 범위를 정의
  Loggers:
    # [Loggers - Root] 모든 로그를 기록하는 최상위 로그를 정의
    Root:
      level: INFO
      additivity: false
      AppenderRef:
        - ref: console-appender
        - ref: rolling-file-appender

    # [Loggers - Loggers] 특정 패키지나 클래스에 대한 로그를 정의
    Logger:
      # 1. Spring Framework 로그 레벨 'INFO' 정의
      - name: com.moonie
        additivity: false
        level: INFO
        AppenderRef:
          - ref: console-appender
          - ref: file-info-appender
          - ref: file-error-appender

      # 2. Spring Framework 로그 레벨 'DEBUG' 정의
      - name: com.moonie
        additivity: false
        level: DEBUG
        AppenderRef:
          - ref: console-appender
          - ref: file-info-appender
          - ref: file-error-appender

      # 3. MyBatis 관련 로그 레벨 특정 패키지 외에는 모두 OFF
#      - name: jdbc
#        level: OFF
#        additivity: false
#      - name: jdbc.sqlonly
#        level: INFO
#        additivity: false
#      - name: jdbc.sqltiming
#        level: INFO
#        additivity: false
#      - name: jdbc.resultsettable
#        level: OFF
#        additivity: false
#      - name: jdbc.audit
#        level: OFF
#        additivity: false
#      - name: jdbc.resultset
#        level: DEBUG
#        additivity: false
#      - name: jdbc.connection
#        level: OFF
#        additivity: false

# https://yainii.tistory.com/33
# yml로 log4j2 설정하기 https://adjh54.tistory.com/388